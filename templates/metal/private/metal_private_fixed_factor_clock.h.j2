/* Copyright 2020 SiFive, Inc */
/* Copyright © 2020 Keith Packard */
/*
 * Licensed under the Apache License, Version 2.0 (the “License”); you
 * may not use this file except in compliance with the License. A copy
 * of this license can be found in the LICENSE.Apache2 file included
 * with this software. You may also obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
/* SPDX-License-Identifier: Apache-2.0 */

#ifndef METAL__DRIVERS__FIXED_FACTOR_CLOCK_H
#define METAL__DRIVERS__FIXED_FACTOR_CLOCK_H

{% include 'template_comment.h.j2' %}

{% if 'fixed-factor-clock' in devices %}
{% set fixed_factor_clocks = devices['fixed-factor-clock'] %}

#include <metal/clock.h>

#define __METAL_DT_NUM_FIXED_FACTOR_CLOCKS {{ devices['fixed-factor-clock']|length }}

static const struct dt_fixed_factor_clock_data {
	uint32_t mul;
	uint32_t div;
	struct metal_clock ref;
} dt_clock_data[__METAL_DT_NUM_FIXED_FACTOR_CLOCKS] = {
	{% for clk in fixed_factor_clocks %}
	{
		/* {{ clk.clocks[0].compatible[0] }} */
		.mul = {{ clk.clock_mult[0] }},
		.div = {{ clk.clock_div[0] }},
		.ref = { {{ clk.clocks[0].id }} }
	},
	{% endfor %}
};

{% set driver_string = to_snakecase(fixed_factor_clocks[0].clocks[0].compatible[0]) %}
{% include 'clock_dispatch.h.j2' %}

{% endif %}

#endif

